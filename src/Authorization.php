<?php

namespace Mix\Auth;

use Mix\Core\Component;

/**
 * Class Authorization
 * @author LIUJIAN <coder.keda@gmail.com>
 * @package Mix\Auth
 */
class Authorization extends Component
{

    /**
     * 连接池
     * @var \Mix\Pool\ConnectionPoolInterface
     */
    public $pool;

    /**
     * 处理者
     * @var \Mix\Redis\RedisConnectionInterface
     */
    public $handler;

    /**
     * Key前缀
     * @var string
     */
    public $keyPrefix = 'TOKEN:';

    /**
     * 有效期
     * @var int
     */
    public $expiresIn = 604800;

    /**
     * bearerToken
     * @var \Mix\Auth\BearerTokenInterface
     */
    public $bearerToken;

    /**
     * Key
     * @var string
     */
    protected $_key = '';

    /**
     * Token
     * @var string
     */
    protected $_token = '';

    /**
     * 初始化事件
     */
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 从连接池获取连接
        if (isset($this->pool)) {
            $this->handler = $this->pool->getConnection();
        }
    }

    /**
     * 请求前置事件
     */
    public function onRequestBefore()
    {
        parent::onRequestBefore(); // TODO: Change the autogenerated stub
        // 载入Token
        $this->loadToken();
    }

    /**
     * 载入 Token
     * @return bool
     */
    public function loadToken()
    {
        $token = $this->bearerToken->get();
        if (!$token) {
            return false;
        }
        $this->_key   = $this->keyPrefix . $token;
        $this->_token = $token;
        return true;
    }

    /**
     * 获取 Token
     * @return string
     */
    public function getToken()
    {
        return $this->_token;
    }

    /**
     * 创建 Token
     * @return bool
     */
    public function createToken()
    {
        do {
            $token        = $this->bearerToken->create();
            $this->_key   = $this->keyPrefix . $token;
            $this->_token = $token;
        } while ($this->handler->exists($this->_key));
        return true;
    }

    /**
     * 设置唯一索引
     * @param $uniqueId
     * @param string $prefix
     * @return bool
     */
    public function setUniqueIndex($uniqueId, $prefix = 'client_credentials:')
    {
        $this->deleteUniqueIndex($uniqueId, $prefix);
        $this->createUniqueIndex($uniqueId, $prefix);
        $this->set('__uidx__', [$uniqueId, $prefix]);
        return true;
    }

    /**
     * 创建唯一索引
     * @param $uniqueId
     * @param string $prefix
     * @return bool
     */
    protected function createUniqueIndex($uniqueId, $prefix)
    {
        $uniqueKey = $this->keyPrefix . $prefix . $uniqueId;
        $success   = $this->handler->setex($uniqueKey, $this->expiresIn, $this->_key);
        return $success ? true : false;
    }

    /**
     * 移除唯一索引
     * @param $uniqueId
     * @param string $prefix
     * @return bool
     */
    protected function deleteUniqueIndex($uniqueId, $prefix)
    {
        $uniqueKey = $this->keyPrefix . $prefix . $uniqueId;
        $oldKey    = $this->handler->get($uniqueKey);
        if (empty($oldKey)) {
            return false;
        }
        $success = $this->handler->del($oldKey);
        return $success ? true : false;
    }

    /**
     * 赋值
     * @param $name
     * @param $value
     * @return bool
     */
    public function set($name, $value)
    {
        $success = $this->handler->hmset($this->_key, [$name => serialize($value)]);
        $this->handler->expire($this->_key, $this->expiresIn);
        return $success ? true : false;
    }

    /**
     * 取值
     * @param null $name
     * @return mixed|null
     */
    public function get($name = null)
    {
        if (is_null($name)) {
            $result = $this->handler->hgetall($this->_key);
            foreach ($result as $key => $item) {
                $result[$key] = unserialize($item);
            }
            return $result ?: [];
        }
        $value = $this->handler->hget($this->_key, $name);
        return $value === false ? null : unserialize($value);
    }

    /**
     * 判断是否存在
     * @param $name
     * @return bool
     */
    public function has($name)
    {
        $exist = $this->handler->hexists($this->_key, $name);
        return $exist ? true : false;
    }

    /**
     * 删除
     * @param $name
     * @return bool
     */
    public function delete($name)
    {
        $success = $this->handler->hdel($this->_key, $name);
        return $success ? true : false;
    }

    /**
     * 清除token
     * @return bool
     */
    public function clear()
    {
        $uniqueData = $this->get('__uidx__');
        if (!empty($uniqueData)) {
            list($uniqueId, $prefix) = $uniqueData;
            $this->deleteUniqueIndex($uniqueId, $prefix);
        }
        $success = $this->handler->del($this->_key);
        return $success ? true : false;
    }

    /**
     * 刷新token
     * @return bool
     */
    public function refresh()
    {
        $oldData    = $this->get();
        $uniqueData = $oldData['__uidx__'] ?? false;
        if (!$uniqueData) {
            return false;
        }
        list($uniqueId, $prefix) = $uniqueData;
        $this->clear();
        $this->createToken();
        unset($oldData['__uidx__']);
        foreach ($oldData as $name => $value) {
            $this->set($name, $value);
        }
        $this->setUniqueIndex($uniqueId, $prefix);
        return true;
    }

}
